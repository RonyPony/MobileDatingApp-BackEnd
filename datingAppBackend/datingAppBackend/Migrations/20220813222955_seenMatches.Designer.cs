// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using datingAppBackend.Models;

#nullable disable

namespace datingAppBackend.Migrations
{
    [DbContext(typeof(datingContext))]
    [Migration("20220813222955_seenMatches")]
    partial class seenMatches
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("datingAppBackend.Models.country", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<string>("code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("createdOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("enabled")
                        .HasColumnType("boolean");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("updatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("id");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("datingAppBackend.Models.matches", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<int>("finalUserId")
                        .HasColumnType("integer");

                    b.Property<bool>("isAcepted")
                        .HasColumnType("boolean");

                    b.Property<bool>("isSeen")
                        .HasColumnType("boolean");

                    b.Property<int>("originUserId")
                        .HasColumnType("integer");

                    b.HasKey("id");

                    b.ToTable("Matches");
                });

            modelBuilder.Entity("datingAppBackend.Models.Photo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<byte[]>("Image")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Photos");
                });

            modelBuilder.Entity("datingAppBackend.Models.sexualOrientations", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<bool>("enabled")
                        .HasColumnType("boolean");

                    b.Property<int>("imageId")
                        .HasColumnType("integer");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.ToTable("SexualOrientations");
                });

            modelBuilder.Entity("datingAppBackend.Models.User", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("bio")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("bornDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("countryId")
                        .HasColumnType("integer");

                    b.Property<bool>("deletedAccount")
                        .HasColumnType("boolean");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("instagramUser")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("instagramUserEnabled")
                        .HasColumnType("boolean");

                    b.Property<bool>("isEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("lastLogin")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("lastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("loginStatus")
                        .HasColumnType("integer");

                    b.Property<int>("maximunAgeToMatch")
                        .HasColumnType("integer");

                    b.Property<int>("minimunAgeToMatch")
                        .HasColumnType("integer");

                    b.Property<bool>("modoFantasma")
                        .HasColumnType("boolean");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("preferedCountryId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("registerDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("sexualOrientationId")
                        .HasColumnType("integer");

                    b.Property<int>("sexualPreferenceId")
                        .HasColumnType("integer");

                    b.Property<bool>("showMySexuality")
                        .HasColumnType("boolean");

                    b.Property<string>("whatsappNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("whatsappNumberEnabled")
                        .HasColumnType("boolean");

                    b.HasKey("id");

                    b.ToTable("Users");
                });
#pragma warning restore 612, 618
        }
    }
}
